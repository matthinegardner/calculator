{"version":3,"sources":["components/Button.js","components/Input.js","App.js","serviceWorker.js","index.js"],"names":["Button","props","buttonSize","children","deleteButton","operatorButton","operator","cn","classnames","id","className","onClick","handleClick","Input","App","addZeroToInput","val","state","input","setState","previousVal","addToInput","operators","isOperator","includes","decimalInNumber","evaluated","negativeSignInNumber","clearLastOperator","clearInput","previousAnswer","nextInput","length","slice","clearLast","evaluate","answer","toString","this","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"0VA2BeA,EAvBA,SAAAC,GACX,IAAMC,EACiB,UAAnBD,EAAME,UAA2C,MAAnBF,EAAME,SAC9B,gBACA,SACJC,EAAkC,QAAnBH,EAAME,SAAqB,gBAAkB,GAC5DE,EAAiBJ,EAAMK,SAAW,WAAa,GAC/CC,EAAKC,IAAWN,EAAYG,EAAgBD,GAClD,OACI,yBACIK,GAAIR,EAAMQ,GACVC,UAAWH,EACXI,QAAS,kBACLV,EAAMW,YACFX,EAAMK,SAAWL,EAAMK,SAAWL,EAAME,YAI/CF,EAAME,WCbJU,G,MAND,SAAAZ,GAAK,OACf,yBAAKQ,GAAIR,EAAMQ,GAAIC,UAAU,SACxBT,EAAME,Y,QC0PAW,E,YAxPX,WAAYb,GAAQ,IAAD,8BACf,4CAAMA,KAaVc,eAAiB,SAAAC,GACY,MAArB,EAAKC,MAAMC,OACX,EAAKC,SAAS,CAAED,MAAO,EAAKD,MAAMC,MAAQF,EAAKI,YAAaJ,KAhBjD,EAqBnBK,WAAa,SAAAL,GACT,IAAMM,EAAY,CAAC,IAAK,IAAK,IAAK,KAE5BC,EAAaD,EAAUE,SAASR,GAHtB,EAUZ,EAAKC,MALLQ,EALY,EAKZA,gBACAP,EANY,EAMZA,MACAQ,EAPY,EAOZA,UACAN,EARY,EAQZA,YACAO,EATY,EASZA,qBAGJ,GACKF,GAA2B,MAART,GACnBW,GAAgC,MAARX,EAEzB,OAAO,KAWX,IAPa,MAARA,GAAyB,MAAVE,GACP,MAARF,GAAeM,EAAUE,SAASJ,KAEnC,EAAKD,SAAS,CAAEQ,sBAAsB,IAIrCD,GAAuB,MAAVR,EAiBPQ,GAAaH,EACpB,EAAKJ,SAAS,CACVD,MAAOA,EAAQF,EACfU,WAAW,EACXN,YAAaJ,EACbW,sBAAsB,IAM1B,EAAKR,SAAS,CACVD,MAAOF,EACPU,WAAW,EACXN,YAAaJ,EACbS,iBAAiB,EACjBE,sBAAsB,QAjCG,CAE7B,GAAY,MAARX,GA3BoB,CAAC,IAAK,IAAK,KA2BIQ,SAASJ,SAEzC,GAAIG,GAAcD,EAAUE,SAASJ,GAExC,OADA,EAAKQ,kBAAkBZ,GAChB,KAGX,EAAKG,SAAS,CACVD,MAAOA,EAAQF,EACfU,WAAW,EACXN,YAAaJ,EACbW,sBAAsB,IAwBlB,MAARX,GACA,EAAKG,SAAS,CAAEM,iBAAiB,IAGjCF,GACA,EAAKJ,SAAS,CAAEM,iBAAiB,KA1FtB,EA8FnBI,WAAa,WACT,EAAKV,SAAS,CACVD,MAAO,IACPE,YAAa,GACbU,eAAgB,GAChBJ,WAAW,EACXD,iBAAiB,EACjBE,sBAAsB,KArGX,EAkHnBC,kBAAoB,SAAAZ,GAAQ,IAAD,EACQ,EAAKC,MAA5BG,EADe,EACfA,YAAaF,EADE,EACFA,MACfI,EAAY,CAAC,IAAK,IAAK,IAAK,KAS5BS,GARaT,EAAUE,SAASR,IAIlB,MAAhBI,GACAE,EAAUE,SAASN,EAAMA,EAAMc,OAAS,IAClCd,EAAMe,MAAM,GAAI,GAChBf,EAAMe,MAAM,GAAI,IACSjB,EACnC,EAAKG,SAAS,CACVD,MAASa,GAAwB,IACjCX,YAAaJ,KAhIF,EAuInBkB,UAAY,WACR,IAAMH,EAAY,EAAKd,MAAMC,MAAMe,MAAM,GAAI,GAC7C,EAAKd,SAAS,CACVC,YAAa,EAAKH,MAAMC,MAAMe,MAC1B,EAAKhB,MAAMC,MAAMc,OAAS,EAC1B,EAAKf,MAAMC,MAAMc,OAAS,GAE9Bd,MAASa,GAAwB,OA9ItB,EAkJnBI,SAAW,WACP,IAAMC,EAASD,YAAS,EAAKlB,MAAMC,OAAOmB,WAC1C,EAAKlB,SAAS,CACVD,MAAOkB,EACPV,WAAW,EACXI,eAAgBM,KApJpB,EAAKnB,MAAQ,CACTC,MAAO,IACPE,YAAa,GACbU,eAAgB,GAChBJ,WAAW,EACXD,iBAAiB,EACjBE,sBAAsB,GATX,E,sEA4Jf,OACI,yBAAKjB,UAAU,OACX,yBAAKA,UAAU,gBACX,yBAAKA,UAAU,OACX,kBAAC,EAAD,CAAOD,GAAG,WAAW6B,KAAKrB,MAAMC,QAEpC,yBAAKR,UAAU,OACX,kBAAC,EAAD,CAAQD,GAAG,QAAQG,YAAa0B,KAAKT,YAArC,SAGA,kBAAC,EAAD,CAAQpB,GAAG,YAAYG,YAAa0B,KAAKJ,WAAzC,OAGA,kBAAC,EAAD,CACIzB,GAAG,SACHH,SAAU,IACVM,YAAa0B,KAAKjB,YAHtB,SAQJ,yBAAKX,UAAU,OACX,kBAAC,EAAD,CAAQD,GAAG,QAAQG,YAAa0B,KAAKjB,YAArC,KAGA,kBAAC,EAAD,CAAQZ,GAAG,QAAQG,YAAa0B,KAAKjB,YAArC,KAGA,kBAAC,EAAD,CAAQZ,GAAG,OAAOG,YAAa0B,KAAKjB,YAApC,KAGA,kBAAC,EAAD,CACIZ,GAAG,WACHH,SAAU,IACVM,YAAa0B,KAAKjB,YAHtB,SAQJ,yBAAKX,UAAU,OACX,kBAAC,EAAD,CAAQD,GAAG,OAAOG,YAAa0B,KAAKjB,YAApC,KAGA,kBAAC,EAAD,CAAQZ,GAAG,OAAOG,YAAa0B,KAAKjB,YAApC,KAGA,kBAAC,EAAD,CAAQZ,GAAG,MAAMG,YAAa0B,KAAKjB,YAAnC,KAGA,kBAAC,EAAD,CACIZ,GAAG,WACHH,SAAU,IACVM,YAAa0B,KAAKjB,YAHtB,WAQJ,yBAAKX,UAAU,OACX,kBAAC,EAAD,CAAQD,GAAG,MAAMG,YAAa0B,KAAKjB,YAAnC,KAGA,kBAAC,EAAD,CAAQZ,GAAG,MAAMG,YAAa0B,KAAKjB,YAAnC,KAGA,kBAAC,EAAD,CAAQZ,GAAG,QAAQG,YAAa0B,KAAKjB,YAArC,KAGA,kBAAC,EAAD,CACIZ,GAAG,MACHH,SAAU,IACVM,YAAa0B,KAAKjB,YAHtB,MAQJ,yBAAKX,UAAU,OACX,kBAAC,EAAD,CAAQD,GAAG,OAAOG,YAAa0B,KAAKvB,gBAApC,KAGA,kBAAC,EAAD,CAAQN,GAAG,UAAUG,YAAa0B,KAAKjB,YAAvC,KAGA,kBAAC,EAAD,CAAQZ,GAAG,SAASG,YAAa0B,KAAKH,UAAtC,Y,GA/ONI,aCMEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.c0973d32.chunk.js","sourcesContent":["import React from \"react\";\nimport \"../styles/Button.css\";\nimport classnames from \"classnames\";\n\nconst Button = props => {\n    const buttonSize =\n        props.children === \"Clear\" || props.children === \"=\"\n            ? \"button-double\"\n            : \"button\";\n    const deleteButton = props.children === \"Del\" ? \"button-delete\" : \"\";\n    const operatorButton = props.operator ? \"operator\" : \"\";\n    const cn = classnames(buttonSize, operatorButton, deleteButton);\n    return (\n        <div\n            id={props.id}\n            className={cn}\n            onClick={() =>\n                props.handleClick(\n                    props.operator ? props.operator : props.children\n                )\n            }\n        >\n            {props.children}\n        </div>\n    );\n};\n\nexport default Button;\n","import React from \"react\";\nimport \"../styles/Input.css\";\n\nconst Input = props => (\n    <div id={props.id} className=\"input\">\n        {props.children}\n    </div>\n);\n\nexport default Input;\n","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport Button from \"./components/Button\";\nimport Input from \"./components/Input\";\nimport { evaluate } from \"mathjs\";\n\nclass App extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            input: \"0\",\n            previousVal: \"\",\n            previousAnswer: \"\",\n            evaluated: false,\n            decimalInNumber: false,\n            negativeSignInNumber: false\n        };\n    }\n\n    // Handler for \"0\" input. The logic is to prevent multiple leading zeros\n    addZeroToInput = val => {\n        if (this.state.input !== \"0\") {\n            this.setState({ input: this.state.input + val, previousVal: val });\n        }\n    };\n\n    // Handler for all other input, other than \"0\".\n    addToInput = val => {\n        const operators = [\"+\", \"-\", \"*\", \"/\"];\n        const operatorsNoSubtract = [\"+\", \"*\", \"/\"];\n        const isOperator = operators.includes(val);\n        const {\n            decimalInNumber,\n            input,\n            evaluated,\n            previousVal,\n            negativeSignInNumber\n        } = this.state;\n\n        if (\n            (decimalInNumber && val === \".\") ||\n            (negativeSignInNumber && val === \"-\")\n        ) {\n            return null;\n        }\n\n        if (\n            (val === \"-\" && input === \"0\") ||\n            (val === \"-\" && operators.includes(previousVal))\n        ) {\n            this.setState({ negativeSignInNumber: true });\n        }\n\n        // Normal input - will append to end\n        if (!evaluated && input !== \"0\") {\n            // if val is \"-\" and previousval is +, *, /\n            if (val === \"-\" && operatorsNoSubtract.includes(previousVal)) {\n                // if val is +, -, /, * and the previous value is is +, *, /, replace operator with new operator\n            } else if (isOperator && operators.includes(previousVal)) {\n                this.clearLastOperator(val);\n                return null;\n            }\n\n            this.setState({\n                input: input + val,\n                evaluated: false,\n                previousVal: val,\n                negativeSignInNumber: false\n            });\n\n            // For cases where we want to use the answer and perform another operation ( starts with + - * / )\n        } else if (evaluated && isOperator) {\n            this.setState({\n                input: input + val,\n                evaluated: false,\n                previousVal: val,\n                negativeSignInNumber: false\n            });\n        }\n\n        // For cases where the answer is in the display, but the user has entered a number (starts a new calculation)\n        else {\n            this.setState({\n                input: val,\n                evaluated: false,\n                previousVal: val,\n                decimalInNumber: false,\n                negativeSignInNumber: false\n            });\n        }\n\n        if (val === \".\") {\n            this.setState({ decimalInNumber: true });\n        }\n\n        if (isOperator) {\n            this.setState({ decimalInNumber: false });\n        }\n    };\n\n    clearInput = () => {\n        this.setState({\n            input: \"0\",\n            previousVal: \"\",\n            previousAnswer: \"\",\n            evaluated: false,\n            decimalInNumber: false,\n            negativeSignInNumber: false\n        });\n    };\n\n    /**\n     * Is used when there's currently an operator and another operator is entered.\n     * The \"-\" key doubles as both subtract and negative, so use case examples are below:\n     * If 5 + * 7 = is entered, the result should be 35 (i.e. 5 * 7)\n     * If 5 * - 5 = is entered, the result should be -25 (i.e. 5 * -5)\n     * If 5 * - + 5 is entered, the result should be 10. (i.e. 5 + 5)\n     *\n     * As such, the \"end\" value for slice changes depending on the previous operator(s) via remainingChars.\n     */\n    clearLastOperator = val => {\n        const { previousVal, input } = this.state;\n        const operators = [\"+\", \"-\", \"*\", \"/\"];\n        const isOperator = operators.includes(val);\n\n        const remainingChars =\n            isOperator &&\n            previousVal === \"-\" &&\n            operators.includes(input[input.length - 1])\n                ? input.slice(0, -2)\n                : input.slice(0, -1);\n        const nextInput = remainingChars + val;\n        this.setState({\n            input: !!nextInput ? nextInput : \"0\",\n            previousVal: val\n        });\n    };\n\n    /**\n     * For use with the \"Del\" key. The previousVal is set to know whether to allow an operator\n     */\n    clearLast = () => {\n        const nextInput = this.state.input.slice(0, -1);\n        this.setState({\n            previousVal: this.state.input.slice(\n                this.state.input.length - 2,\n                this.state.input.length - 1\n            ),\n            input: !!nextInput ? nextInput : \"0\"\n        });\n    };\n\n    evaluate = () => {\n        const answer = evaluate(this.state.input).toString();\n        this.setState({\n            input: answer,\n            evaluated: true,\n            previousAnswer: answer\n        });\n    };\n\n    render() {\n        return (\n            <div className=\"App\">\n                <div className=\"calc-wrapper\">\n                    <div className=\"row\">\n                        <Input id=\"display\">{this.state.input}</Input>\n                    </div>\n                    <div className=\"row\">\n                        <Button id=\"clear\" handleClick={this.clearInput}>\n                            Clear\n                        </Button>\n                        <Button id=\"clearlast\" handleClick={this.clearLast}>\n                            Del\n                        </Button>\n                        <Button\n                            id=\"divide\"\n                            operator={\"/\"}\n                            handleClick={this.addToInput}\n                        >\n                            &#247;\n                        </Button>\n                    </div>\n                    <div className=\"row\">\n                        <Button id=\"seven\" handleClick={this.addToInput}>\n                            7\n                        </Button>\n                        <Button id=\"eight\" handleClick={this.addToInput}>\n                            8\n                        </Button>\n                        <Button id=\"nine\" handleClick={this.addToInput}>\n                            9\n                        </Button>\n                        <Button\n                            id=\"multiply\"\n                            operator={\"*\"}\n                            handleClick={this.addToInput}\n                        >\n                            &#215;\n                        </Button>\n                    </div>\n                    <div className=\"row\">\n                        <Button id=\"four\" handleClick={this.addToInput}>\n                            4\n                        </Button>\n                        <Button id=\"five\" handleClick={this.addToInput}>\n                            5\n                        </Button>\n                        <Button id=\"six\" handleClick={this.addToInput}>\n                            6\n                        </Button>\n                        <Button\n                            id=\"subtract\"\n                            operator={\"-\"}\n                            handleClick={this.addToInput}\n                        >\n                            &#8722;\n                        </Button>\n                    </div>\n                    <div className=\"row\">\n                        <Button id=\"one\" handleClick={this.addToInput}>\n                            1\n                        </Button>\n                        <Button id=\"two\" handleClick={this.addToInput}>\n                            2\n                        </Button>\n                        <Button id=\"three\" handleClick={this.addToInput}>\n                            3\n                        </Button>\n                        <Button\n                            id=\"add\"\n                            operator={\"+\"}\n                            handleClick={this.addToInput}\n                        >\n                            &#43;\n                        </Button>\n                    </div>\n                    <div className=\"row\">\n                        <Button id=\"zero\" handleClick={this.addZeroToInput}>\n                            0\n                        </Button>\n                        <Button id=\"decimal\" handleClick={this.addToInput}>\n                            .\n                        </Button>\n                        <Button id=\"equals\" handleClick={this.evaluate}>\n                            =\n                        </Button>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}